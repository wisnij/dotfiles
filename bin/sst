#!/usr/bin/env python3
"""Log into a remote machine and start a tmux session named SESSION_NAME.  If a
session with that name is already running, attach to it instead. Defaults to
'default' if a name is not specified.

"""
import argparse
import os
import subprocess
import sys


def parse_args(args=None):
    parser = argparse.ArgumentParser(description=__doc__,
                                     usage="%(prog)s [OPTION...] HOST [SESSION_NAME] [SSH_OPTION...]",
                                     formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument(
        "host",
        help="the host name to ssh to",
        metavar="HOST",
    )

    parser.add_argument(
        "session",
        nargs="?",
        help="the tmux session to connect to or create",
        metavar="SESSION_NAME",
    )

    parser.add_argument(
        "-l", "--list-sessions",
        action="store_true",
        help="display the tmux sessions available on the login host",
    )

    return parser.parse_known_args(args)


def main():
    opts, ssh_opts = parse_args()
    ssh_optstring = " ".join(ssh_opts)

    if opts.list_sessions:
        status, output = subprocess.getstatusoutput(f"ssh {ssh_optstring} {opts.host} 'tmux list-sessions'")
        print(output)
        if "error connecting" in output or "no server running" in output:
            print(f"no tmux sessions found on {opts.host}", file=sys.stderr)
            return 1
        return status

    else:
        new_session_name = opts.session or "default"
        attach_cmd = "tmux attach-session"
        if opts.session:
            attach_cmd += f" -t {opts.session}"

        return os.system(f"""
            ssh {ssh_optstring} -t {opts.host} "{attach_cmd} || tmux new-session -s '{new_session_name}'"
        """.strip())


if __name__ == "__main__":
    sys.exit(main())
